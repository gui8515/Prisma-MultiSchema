// Show  ‚ù§ & Support : https://github.com/joydip007x/prisma-unify007x.git 
// Generated in Thu May 18 2023 18:30:56 GMT+0600 (Bangladesh Standard Time)
// Ignore Error validating datasource `db`: You defined more than one datasource.
// import { DriverLogsFilesBankStatement,DriverLogsFilesBusinessInsurence,DriverLogsFilesDrivingLicense,DriverLogsFilesPassport,DriverLogsFilesPhotoId,DriverLogsFilesVisa} from "DriverLogsFiles";

type DriverLogsCancelled {
  today Int?
  total Int
}


type DriverLogsCoverage {
  id           String?                  @map("_id") @db.ObjectId
  center       DriverLogsCoverageCenter
  radius_miles Int?
  range_miles  Int?
  type         String?
}

type DriverLogsCoverageCenter {
  coordinates Float[]
  lat         Float?
  lng         Float?
  type        String?
}


type DriverLogsCurrent {
  id          String? @map("_id") @db.ObjectId
  coordinates Float[]
  type        String
}


type DriverLogsDelivery {
  today Int
  total Int
}

type DriverLogsFiles {
  bank_statement     DriverLogsFilesBankStatement?
  business_insurence DriverLogsFilesBusinessInsurence
  driving_license    DriverLogsFilesDrivingLicense
  passport           DriverLogsFilesPassport?
  photo_id           DriverLogsFilesPhotoId?
  visa               DriverLogsFilesVisa?
}

type DriverLogsLocations {
  lat Float
  lng Float
}


type DriverLogsLogs {
  end_time   String
  start_time String
}


type DriverLogsRejected {
  today Int
  total Int
}


type DriverLogsReview {
  /// Could not determine type: the field only had null or empty values in the sample set.
  reviews Json?
  total   Int
}

type DriverLogsShift {
  date String
  id   String
}

type DriverLogsTermscondition {
  id         String  @map("_id") @db.ObjectId
  created_at String
  data       String
  signature  String?
}


type DriverLogsFilesBankStatement {
  path   String[]
  status String?
}

type DriverLogsFilesBusinessInsurence {
  backPath    String?
  expiry_date String
  frontPath   String
  status      String
}

type DriverLogsFilesDrivingLicense {
  backPath    String
  expiry_date String?
  frontPath   String
  status      String
}

type DriverLogsFilesPassport {
  backPath    String?
  expiry_date String
  frontPath   String
  status      String
}

type DriverLogsFilesPhotoId {
  backPath    String
  expiry_date String?
  frontPath   String
  status      String
}

type DriverLogsFilesVisa {
  backPath    String?
  expiry_date String?
  frontPath   String?
  status      String
}





type RegisterAddress {
  addressLine String
  city        String
  postCode    String
  state       String
}

type RegisterOtp {
  created_date String
  otp          Int
  status       Int
}



// import {DriverLogsCancelled,DriverLogsCoverage,DriverLogsCurrent,DriverLogsDelivery,DriverLogsFiles,DriverLogsLocations,DriverLogsLogs,DriverLogsRejected,DriverLogsReview,DriverLogsShift,DriverLogsTermscondition} from "..\Types\DriverLogs"


model driver_logs {
  id             String                     @id @default(auto()) @map("_id") @db.ObjectId
  v              Int                        @map("__v")
  cancelled      DriverLogsCancelled?
  country_id     String?
  coverage       DriverLogsCoverage?
  createdAt      DateTime                   @db.Date
  current        DriverLogsCurrent?
  delivery       DriverLogsDelivery
  /// Multiple data types found: Array(String): 97.6%, Array(Unknown): 2.4% out of 89 sampled entries
  delivery_zone  Json?
  driver_id      String                     @unique(map: "driver_id_1")
  files          DriverLogsFiles?
  isAgreed       Boolean?
  locations      DriverLogsLocations[]
  logs           DriverLogsLogs[]
  rejected       DriverLogsRejected?
  review         DriverLogsReview
  /// Multiple data types found: String: 95%, Int: 5% out of 40 sampled entries
  rid            Json?
  shift          DriverLogsShift[]
  status         String
  termscondition DriverLogsTermscondition[]
  updatedAt      DateTime                   @db.Date
  vechicle_type  String?
  vehicle_type   String

  @@index([current], map: "current")
}

// import {RegisterAddress,RegisterOtp} from "..\Types\Register"

model register {
  id                       String           @id @default(auto()) @map("_id") @db.ObjectId
  DOB                      String?
  v                        Int              @map("__v")
  account_type             String?
  activationcode           String?
  address                  RegisterAddress?
  allergy                  String?
  app_config_check         Int
  approve_by               String?
  b_contact                String
  blocklisted_token        Json?
  bossTerms                Json?
  checkout_cust_id         String?
  contact_number           String
  country_calling_code     String
  createdAt                DateTime?        @db.Date
  created_by               String
  customerRoot             String?
  date_added               String?
  dealsAndDiscountsFeed    Boolean?
  deleted                  Int
  display_name             String?
  email                    String
  employee                 String?
  employeeUniqueId         String?
  epos_pin                 String?
  epos_security_pin        String?
  existing_user            Int?
  fname                    String
  id_verify                Int?
  identity_no              String?
  image                    String?
  invitesCount             Int
  isEmailVerified          Int
  /// Multiple data types found: String: 0.2%, Int: 99.8% out of 417 sampled entries
  isIdentityVerified       Json?
  isMobileVerified         Int
  is_mysql_migrate         Boolean?
  last_booking_id          String?
  last_onlineTimeStamp     String?
  last_order_id            String?
  last_order_rid           String?
  lname                    String
  middle_name              String?
  migrated                 Boolean?
  modifiedOn               String
  name                     String
  oldPassword              String[]
  oldUser                  Boolean?
  onlineStatus             Boolean
  otp                      RegisterOtp
  /// Could not determine type: the field only had null or empty values in the sample set.
  passbase_webhook         Json?
  password                 String
  passwordResetToken       String?
  passwordResetTokenExpire String?
  password_change_status   Int
  platform_origin          String?
  promo_code               String?
  promo_code_token         String?
  provider                 String?
  recoverCodeDate          String?
  recovercode              String?
  referral                 Boolean?
  security_pin             String
  shared_earned_amount     String?
  status                   String?
  stripe_cust_id           String?
  support_pin              String?
  support_pin_date_time    String?
  temp_identity_no         String?
  temp_image               String?
  terms_agreement          String?
  tmpKey                   String?
  token                    String?
  tokens                   String[]
  updatedAt                DateTime?        @db.Date
  updated_by               String?
  userID                   String
  userType                 String?
  user_inactive_date       String
  user_social_id           String?

  @@index([email], map: "email_1")
  @@index([userID], map: "userID")
  @@index([contact_number], map: "contact_number_1")
  @@index([b_contact], map: "b_contact_1")
  @@index([userID, email, contact_number, country_calling_code, date_added], map: "userID_1_email_1_contact_number_1_country_calling_code_1_date_added_1")

  @@map("register")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("PRISMA_DATABASE_URL")
}

